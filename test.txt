#import "meta.txt"

#on_compile func on_compile() : void
{
	var module_index : number = get_current_module_index()
	var expr_list : array-native = get_module_expr_list(module_index)

	var functions_decl : native = declare_variable("functions", create_array_type(create_dynamic_type()), null, null)
	
	var i : number = 0
	var func_index : number = 0
	
	while i < len expr_list
	{
		var exp : native = expr_list[i]
		
		// if the expression is a function
		if get_expr_kind(exp) == 23
		{
			insert_expr_into_module(module_index, 
				make_bin_expr(
					make_array_index_expr(
						make_var_expr(reference_variable("functions", null, null)),
						make_num_expr(func_index)
					),
					make_undeclared_var_expr(get_func_decl_name(get_func_expr_decl(exp))),
					"="
				), i
			)
			
			func_index = func_index + 1
		}
	
		i = i + 1
	}
	
	insert_expr_into_module(module_index, 
		make_bin_expr(
			make_var_expr(reference_variable("functions", null, null)),
			make_call_expr(make_undeclared_var_expr("make_array_of_length"), [make_num_expr(func_index)]),
			"="
		), 0
	)
}

write functions
