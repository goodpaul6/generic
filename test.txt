#import "meta.txt"
#import "basic.txt"

extern 
{
	array_push(array-dynamic, dynamic) : void	
	array_pop(array-dynamic) : dynamic
}

#on_compile func exclaim(s : string) : void
{
	write format_string("%s!", [s])
}

#on_compile func pre_compile() : void
{
	var module = get_current_module_index()
	
	// get all the expressions (flattened)
	var expr_list = get_module_expr_list(module, true)
	
	for var i = 0, i < len expr_list, i = i + 1 {
		var kind = get_expr_kind(expr_list[i])
		
		if kind == expr_kind_call {
			exclaim(format_string("found call at index %d", [i]))
		}
	}

	add_expr_to_module(module, parse_code("run()")[0])

	var f = parse_code("func get_n() : number { return 10 }")
	add_expr_to_module(module, f[0])
}

#on_compile pre_compile()

func run() : void 
{
	var x = [] : number
	array_push(x, "hello")
	write x
}

write get_n()